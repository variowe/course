import logging
import os
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from database import db, User, Lesson, Homework, HomeworkSubmission

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db_user = db.get_user(user.id)
    
    if not db_user:
        db_user = db.create_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
    
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞. '
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
    )

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/lessons - –û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫–∏
/homework - –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
    """
    await update.message.reply_text(help_text)

async def lessons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /lessons"""
    user = db.get_user(update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    lessons = db.get_lessons_by_level(user.level)
    if not lessons:
        await update.message.reply_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è.")
        return

    keyboard = []
    for lesson in lessons:
        keyboard.append([InlineKeyboardButton(
            f"–£—Ä–æ–∫ {lesson.order}: {lesson.title}",
            callback_data=f"lesson_{lesson.id}"
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è {user.level}:",
        reply_markup=reply_markup
    )

async def homework(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /homework"""
    user = db.get_user(update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    submissions = db.get_user_submissions(user.id)
    if not submissions:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return

    message = "–í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
    for submission in submissions:
        homework = db.get_homework(submission.homework_id)
        if homework:
            message += f"üìù {homework.title}\n"
            message += f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ' if submission.grade else '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'}\n"
            if submission.grade:
                message += f"–û—Ü–µ–Ω–∫–∞: {submission.grade}/5\n"
            if submission.feedback:
                message += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {submission.feedback}\n"
            message += "\n"

    await update.message.reply_text(message)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    user = db.get_user(update.effective_user.id)
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return

    profile_text = f"""
üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
–ò–º—è: {user.first_name} {user.last_name or ''}
–£—Ä–æ–≤–µ–Ω—å: {user.level}
–û–ø—ã—Ç: {user.experience}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {len(user.completed_lessons)}
–°–µ—Ä–∏—è –∑–∞–Ω—è—Ç–∏–π: {user.streak} –¥–Ω–µ–π
    """
    await update.message.reply_text(profile_text)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("lesson_"):
        lesson_id = int(query.data.split("_")[1])
        lesson = db.get_lesson(lesson_id)
        if lesson:
            message = f"""
üìö {lesson.title}

{lesson.description}

{lesson.content}
            """
            if lesson.audio_url:
                message += f"\nüéß –ê—É–¥–∏–æ: {lesson.audio_url}"
            
            await query.message.reply_text(message)

async def webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user = db.get_user(update.effective_user.id)
        
        if not user:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        action = data.get('action')
        
        if action == 'submit_homework':
            homework_id = data.get('homework_id')
            content = data.get('content')
            type = data.get('type')
            
            if not all([homework_id, content, type]):
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")
                return
                
            submission = db.submit_homework(homework_id, user.id, content, type)
            await update.message.reply_text(
                f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n"
                f"ID: {submission.id}\n"
                f"–¢–∏–ø: {'–¢–µ–∫—Å—Ç' if type == 'text' else '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'}"
            )
            
        elif action == 'complete_lesson':
            lesson_id = data.get('lesson_id')
            if not lesson_id:
                await update.message.reply_text("–û—à–∏–±–∫–∞: ID —É—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
                return
                
            if lesson_id not in user.completed_lessons:
                user.completed_lessons.append(lesson_id)
                user.experience += 100  # –ù–∞—á–∏—Å–ª—è–µ–º –æ–ø—ã—Ç –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–∞
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
                if user.experience >= user.level * 1000:
                    user.level += 1
                    await update.message.reply_text(
                        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —É—Ä–æ–≤–Ω—è {user.level}!"
                    )
                
                await update.message.reply_text(
                    f"‚úÖ –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ –æ–ø—ã—Ç–∞: 100"
                )
            else:
                await update.message.reply_text("–≠—Ç–æ—Ç —É—Ä–æ–∫ —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
                
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except json.JSONDecodeError:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("lessons", lessons))
    application.add_handler(CommandHandler("homework", homework))
    application.add_handler(CommandHandler("profile", profile))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 